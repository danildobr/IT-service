from openpyxl.styles import Font
import tempfile
from telebot import types
from openpyxl import Workbook
from models import *
from decorators import it_specialist_required
from openpyxl.drawing.image import Image as ExcelImage

def register_it_handlers(bot):

    @bot.message_handler(func=lambda msg: msg.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
    @it_specialist_required
    def export_all_tickets_excel(message):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –í–°–ï –∑–∞—è–≤–∫–∏ –≤ Excel —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        try:
            with Session() as session:
                tickets = session.query(Ticket).order_by(Ticket.created_at.desc()).all()
                if not tickets:
                    bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
                    return

                wb = Workbook()
                ws = wb.active
                ws.title = "–í—Å–µ –∑–∞—è–≤–∫–∏"

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ["ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞", "–°–∫—Ä–∏–Ω—à–æ—Ç"]
                ws.append(headers)
                for cell in ws[1]:
                    cell.font = Font(bold=True)

                row_num = 2
                temp_files = []  # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–º

                for ticket in tickets:
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    username = f"@{ticket.user.username}" if ticket.user.username else f"ID{ticket.user.telegram_id}"
                    category = f"{ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}"
                    desc = ticket.description or ""
                    status = ticket.status
                    date_str = ticket.created_at.strftime('%d.%m.%Y %H:%M')

                    ws.append([ticket.id, username, category, ticket.subcategory.name, desc, status, date_str, ""])

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    if ticket.screenshot:
                        try:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            img_ext = 'png'  # Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤ PNG
                            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{img_ext}") as tmp_img:
                                tmp_img.write(ticket.screenshot)
                                img_path = tmp_img.name
                                temp_files.append(img_path)

                            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Excel
                            img = ExcelImage(img_path)
                            img.width = 150  # —É–º–µ–Ω—å—à–∞–µ–º
                            img.height = 100
                            ws.add_image(img, f"H{row_num}")

                            # –ü–æ–¥–≥–æ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                            ws.row_dimensions[row_num].height = 80

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞—è–≤–∫–∏ {ticket.id}: {e}")

                    row_num += 1

                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
                for col in "ABCDEFG":
                    ws.column_dimensions[col].width = 20
                ws.column_dimensions["H"].width = 25  # –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel
                with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp_excel:
                    wb.save(tmp_excel.name)
                    excel_path = tmp_excel.name

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                with open(excel_path, 'rb') as f:
                    bot.send_document(
                        message.chat.id,
                        f,
                        caption="üìã –í—Å–µ –∑–∞—è–≤–∫–∏",
                        visible_file_name="–í—Å–µ_–∑–∞—è–≤–∫–∏.xlsx"
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(excel_path)
                for f in temp_files:
                    try:
                        os.unlink(f)
                    except:
                        pass

        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            print("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫:", e)
            


    # @bot.message_handler(func=lambda msg: msg.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    # @it_specialist_required
    # def request_additional_info(message):
    #     """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    #     try:
    #         ticket_id = int(message.text.split()[1])
    #         with Session() as session:
    #             ticket = session.query(Ticket).filter_by(id=ticket_id).first()
    #             if not ticket:
    #                 bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    #                 return
                
    #             msg = bot.reply_to(message, 
    #                 f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}:\n"
    #                 "(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                
    #             bot.register_next_step_handler(msg, process_info_request, ticket_id)
                
    #     except (IndexError, ValueError):
    #         bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /request_info <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")

    # def process_info_request(message, ticket_id):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    #     with Session() as session:
    #         ticket = session.query(Ticket).filter_by(id=ticket_id).first()
    #         if not ticket:
    #             bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    #             return
            
    #         ticket.status = '–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π'
    #         session.commit()
            
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #         try:
    #             bot.send_message(
    #                 ticket.user.telegram_id,
    #                 f"‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{ticket.id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    #                 f"{message.text}\n\n"
    #                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    #             )
    #             bot.reply_to(message, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{ticket.user.username}")
    #         except Exception as e:
    #             bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                
                
    @bot.message_handler(func=lambda msg: msg.text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É")
    @it_specialist_required
    def close_ticket_start(message):
        """–ù–∞—á–∞–ª–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏: –∑–∞–ø—Ä–æ—Å ID"""
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:")
        bot.register_next_step_handler(msg, _ask_close_ticket_confirmation)


    def _ask_close_ticket_confirmation(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            ticket_id = int(message.text.strip())
            
            with Session() as session:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if not ticket:
                    bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                if ticket.status == "–ó–∞–∫—Ä—ã—Ç–∞":
                    bot.reply_to(message, f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ #{ticket_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                username = f"@{ticket.user.username}" if ticket.user.username else f"ID{ticket.user.telegram_id}"
                category = f"{ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}"
                short_desc = (ticket.description[:60] + '...') if len(ticket.description) > 60 else ticket.description

                # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å", callback_data=f"confirm_close_{ticket_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_close")
                )

                bot.send_message(
                    message.chat.id,
                    f"‚ùì –¢–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É <b>#{ticket_id}</b>?\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {short_desc}\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {ticket.status}",
                    reply_markup=markup,
                    parse_mode='HTML'
                )

        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π '‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É' ")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_close_"))
    @it_specialist_required
    def confirm_close_ticket(call):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            ticket_id = int(call.data.split("_")[-1])
            
            with Session() as session:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if not ticket:
                    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                if ticket.status == "–ó–∞–∫—Ä—ã—Ç–∞":
                    bot.edit_message_text(
                        f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ #{ticket_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                ticket.status = "–ó–∞–∫—Ä—ã—Ç–∞"
                ticket.closed_at = datetime.now()
                session.commit()

                bot.edit_message_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!",
                    call.message.chat.id,
                    call.message.message_id
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(
                        ticket.user.telegram_id,
                        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                    )
                except:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        except Exception as e:
            bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {str(e)}",
                call.message.chat.id,
                call.message.message_id
            )


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_close")
    def cancel_close_ticket(call):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏"""
        bot.edit_message_text(
            "‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            call.message.chat.id,
            call.message.message_id
        )
            
    
    @bot.message_handler(func=lambda msg: msg.text == "üîÑ –í–∑—è—Ç—å –∑–∞—è–≤–∫—É")
    @it_specialist_required
    def start_take_ticket(message):
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É:")
        bot.register_next_step_handler(msg, _ask_take_confirmation)


    def _ask_take_confirmation(message):
        try:
            ticket_id = int(message.text.strip())
            with Session() as session:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if not ticket:
                    bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                if ticket.status != "–û—Ç–∫—Ä—ã—Ç–∞":
                    if ticket.status == "–í —Ä–∞–±–æ—Ç–µ" and ticket.assigned_to:
                        # –ò—â–µ–º IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ telegram_id
                        it_specialist = session.query(User).filter_by(telegram_id=ticket.assigned_to).first()
                        if it_specialist:
                            spec_name = f"@{it_specialist.username}" if it_specialist.username else f"ID {it_specialist.telegram_id}"
                            bot.reply_to(
                                message,
                                f"‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∑–∞ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: {spec_name}.\n"
                                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {ticket.status}"
                            )
                        else:
                            bot.reply_to(
                                message,
                                f"‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î).\n"
                                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {ticket.status}"
                            )
                    else:
                        bot.reply_to(
                            message,
                            f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∑—è—Ç–∏—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {ticket.status}"
                        )
                    return
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                username = f"@{ticket.user.username}" if ticket.user.username else f"ID{ticket.user.telegram_id}"
                category = f"{ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}"
                desc = (ticket.description[:60] + '...') if len(ticket.description) > 60 else ticket.description

                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"confirm_take_{ticket_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_take")
                )

                bot.send_message(
                    message.chat.id,
                    f"‚ùì –í–∑—è—Ç—å –∑–∞—è–≤–∫—É #{ticket_id} –≤ —Ä–∞–±–æ—Ç—É?\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}",
                    reply_markup=markup,
                )

        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_take_"))
    @it_specialist_required
    def confirm_take_ticket(call):
        ticket_id = int(call.data.split("_")[-1])
        with Session() as session:
            ticket = session.query(Ticket).filter_by(id=ticket_id).first()
            if not ticket:
                bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            if ticket.status != "–û—Ç–∫—Ä—ã—Ç–∞":
                bot.edit_message_text(
                    f"‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –°—Ç–∞—Ç—É—Å: {ticket.status}",
                    call.message.chat.id,
                    call.message.message_id
                )
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            ticket.status = "–í —Ä–∞–±–æ—Ç–µ"
            ticket.assigned_to = call.from_user.id
            ticket.taken_at = datetime.now()
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    ticket.user.telegram_id,
                    f"üë®‚Äçüíª –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
                )
            except:
                pass

            bot.edit_message_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!",
                call.message.chat.id,
                call.message.message_id
            )


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_take")
    def cancel_take(call):
        bot.edit_message_text("‚ùå –í–∑—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

            
    @bot.message_handler(func=lambda msg: msg.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    @it_specialist_required
    def start_request_clarification(message):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∑–∞—è–≤–∫–∏"""
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ:")
        bot.register_next_step_handler(msg, _ask_clarification_text)


    def _ask_clarification_text(message):
        """–ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            ticket_id = int(message.text.strip())
            with Session() as session:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if not ticket:
                    bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                if ticket.assigned_to != message.from_user.id:
                    bot.reply_to(message, "‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.")
                    return

                if ticket.status == "–ó–∞–∫—Ä—ã—Ç–∞":
                    bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ticket_id –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                bot.register_next_step_handler(
                    bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"),
                    _process_clarification_request,
                    ticket_id=ticket_id
                )
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


    def _process_clarification_request(message, ticket_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ñ–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π'"""
        question = message.text.strip()
        if not question:
            bot.reply_to(message, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        with Session() as session:
            ticket = session.query(Ticket).filter_by(id=ticket_id).first()
            if not ticket or ticket.assigned_to != message.from_user.id:
                bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º.")
                return

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            ticket.status = "–ñ–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π"
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot.send_message(
                    ticket.user.telegram_id,
                    f"üë®‚Äçüíª IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{ticket.id}:\n"
                    f"¬´–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª\n\n"
                    f"¬´–¢–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {question}¬ª"
                )
                bot.reply_to(message, f"‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}.")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")