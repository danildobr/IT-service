from models import *

IT_SPECIALIST_COMMANDS = ['take', 'close', 'mytickets', 'request_info', 'alltickets']

def register_it_handlers(bot):

    @bot.message_handler(commands=IT_SPECIALIST_COMMANDS)
    def check_it_specialist(message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user or not user.is_it_specialist:
                bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if message.text.startswith('/take'):
            take_ticket(message)
        # –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        elif message.text.startswith('/close'):
            close_ticket(message)
        # –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        elif message.text.startswith('/mytickets'):
            show_my_tickets(message)
        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        elif message.text.startswith('/request_info'):
            request_additional_info(message)
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        elif message.text.startswith('/alltickets'):
            show_all_tickets(message)
            # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≤–æ–∫

    def show_all_tickets(message):
        '''–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏'''
                
        with Session() as session:
            tickets = session.query(Ticket).order_by(Ticket.created_at.desc()).all()

            if not tickets:
                bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_parts = []
            current_part = "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>:\n\n"
            
            for ticket in tickets:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                    status_icon = {
                        '–û—Ç–∫—Ä—ã—Ç': 'üü°',
                        '–í —Ä–∞–±–æ—Ç–µ': 'üü†',
                        '–ó–∞–∫—Ä—ã—Ç': 'üü¢',
                        '–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π': 'üîµ'
                    }.get(ticket.status, '‚ö™')

                    description = ticket.description if ticket.description else "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                    if len(description) > 100:
                        description = description[:100] + "..."

                    ticket_info = (
                        f"{status_icon} <b>–ó–∞—è–≤–∫–∞ #{ticket.id}</b>\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.user.username}\n"
                        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}\n"
                        f"üïí –°–æ–∑–¥–∞–Ω–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                        f"üîç –°—Ç–∞—Ç—É—Å: {ticket.status}\n"
                        f"üîπ /take_{ticket.id} /close_{ticket.id}\n\n"
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –ª–∏–º–∏—Ç
                    if len(current_part) + len(ticket_info) > 4000:
                        message_parts.append(current_part)
                        current_part = ticket_info
                    else:
                        current_part += ticket_info

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ {ticket.id}: {e}")
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                message_parts.append(current_part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, part in enumerate(message_parts, 1):
                try:
                    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if i == len(message_parts):
                        part += f"\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(tickets)}"
                    
                    bot.send_message(
                        message.chat.id,
                        part,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    def take_ticket(message):
        """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
        try:
            ticket_id = int(message.text.split()[1])
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /take <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
            return
        
        with Session() as session:
            ticket = session.query(Ticket).filter_by(id=ticket_id, status='–û—Ç–∫—Ä—ã—Ç').first()
            if not ticket:
                bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                return
            
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            ticket.status = '–í —Ä–∞–±–æ—Ç–µ'
            ticket.taken_at = datetime.now()
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    ticket.user.telegram_id,
                    f"üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket.id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name}\n"
                    f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{user.username}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            bot.reply_to(message, f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É #{ticket.id} –≤ —Ä–∞–±–æ—Ç—É")

    def close_ticket(message):
        """–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"""
        try:
            ticket_id = int(message.text.split()[1])
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
            return
        
        with Session() as session:
            ticket = session.query(Ticket).filter_by(
                id=ticket_id, 
                status='–í —Ä–∞–±–æ—Ç–µ'
            ).first()
            
            if not ticket:
                bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ")
                return
            
            ticket.status = '–ó–∞–∫—Ä—ã—Ç'
            ticket.closed_at = datetime.now()
            session.commit()
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time_spent = (ticket.closed_at - ticket.taken_at).total_seconds() / 60
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    ticket.user.telegram_id,
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket.id} –∑–∞–∫—Ä—ã—Ç–∞\n"
                    f"–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {int(time_spent)} –º–∏–Ω—É—Ç\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            bot.reply_to(message, f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket.id} –∑–∞–∫—Ä—ã—Ç–∞. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(time_spent)} –º–∏–Ω")

    def show_my_tickets(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            tickets = session.query(Ticket).filter(
                Ticket.status == '–í —Ä–∞–±–æ—Ç–µ'
            ).order_by(Ticket.taken_at.desc()).all()
            
            if not tickets:
                bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ")
                return
            
            response = "üìå –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
            for ticket in tickets:
                time_in_work = (datetime.now() - ticket.taken_at).total_seconds() / 60
                response += (
                    f"üîπ #{ticket.id}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.user.username}\n"
                    f"–í —Ä–∞–±–æ—Ç–µ: {int(time_in_work)} –º–∏–Ω\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {ticket.description}\n"
                    f"–î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
            
            bot.reply_to(message, response)

    def request_additional_info(message):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            ticket_id = int(message.text.split()[1])
            with Session() as session:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if not ticket:
                    bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                msg = bot.reply_to(message, 
                    f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}:\n"
                    "(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                
                bot.register_next_step_handler(msg, process_info_request, ticket_id)
                
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /request_info <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")

    def process_info_request(message, ticket_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        with Session() as session:
            ticket = session.query(Ticket).filter_by(id=ticket_id).first()
            if not ticket:
                bot.reply_to(message, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            ticket.status = '–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π'
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot.send_message(
                    ticket.user.telegram_id,
                    f"‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{ticket.id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                    f"{message.text}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                bot.reply_to(message, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{ticket.user.username}")
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")        
            

        

        
