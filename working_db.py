from models import *
import os 
from dotenv import load_dotenv

load_dotenv()


def create_tables(engine):
    Base.metadata.drop_all(engine) # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    Base.metadata.create_all(engine) # —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü


def add_category(session, json_file='data_category.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        current_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(current_dir, json_file)
        
        print(f"–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {json_path}")

        if not os.path.exists(json_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
            print(os.listdir(current_dir))
            return
        
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        added_categories = 0
        added_subcategories = 0
        updated_recommendations = 0

        for category_data in data['categories']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = session.query(Category).filter_by(name=category_data['name']).first()
            
            if not category:
                category = Category(name=category_data['name'])
                session.add(category)
                session.flush()
                added_categories += 1
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for subcat_data in category_data['subcategories']:
                subcategory = session.query(Subcategory).filter_by(
                    category_id=category.id,
                    name=subcat_data['name']
                ).first()
                
                if not subcategory:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    subcategory = Subcategory(
                        category_id=category.id,
                        name=subcat_data['name'],
                        recommendation=subcat_data['solution']
                    )
                    session.add(subcategory)
                    added_subcategories += 1
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name} ‚Üí {subcategory.name}")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                    if subcategory.recommendation != subcat_data['solution']:
                        old_rec = subcategory.recommendation
                        subcategory.recommendation = subcat_data['solution']
                        updated_recommendations += 1
                        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {subcategory.name}\n"
                              f"–ë—ã–ª–æ: {old_rec}\n"
                              f"–°—Ç–∞–ª–æ: {subcategory.recommendation}")
        
        session.commit()
        print(f"\n–ò—Ç–æ–≥:\n"
              f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_categories}\n"
              f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_subcategories}\n"
              f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {updated_recommendations}")

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        raise     
        

def check_user(session, message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        return user
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
              

def get_or_create_user(session, message):
    '''–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        user = check_user(session, message)
        
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
            )
            session.add(user)
            session.commit()
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {message.from_user.username}')
            return user
        
        return user
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        

def setup_it_specialists():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ .env –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    it_specialists_str = os.getenv('IT_SPECIALIST', '')
    if not it_specialists_str:
        print("‚ö†Ô∏è –í .env –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è IT_SPECIALIST")
        return
    
    it_specialist_ids = [int(id_str.strip()) for id_str in it_specialists_str.split(',') if id_str.strip().isdigit()]
    
    if not it_specialist_ids:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ID –≤ IT_SPECIALIST")
        return
    
    with Session() as session:
        added_count = 0
        updated_count = 0
        
        for telegram_id in it_specialist_ids:
            try:
                user = session.query(User).filter_by(telegram_id=telegram_id).first()
                
                if user:
                    if not user.is_it_specialist:
                        user.is_it_specialist = True
                        updated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º username
                    user = User(
                        telegram_id=telegram_id,
                        username=f"it_specialist_{telegram_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        is_it_specialist=True,
                        is_admin=False
                    )
                    session.add(user)
                    added_count += 1
                
                session.commit()
                
            except Exception as e:
                session.rollback()
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID {telegram_id}: {e}")
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        

def setup_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
    admins_str = os.getenv('ADMIN_ID', '')
    if not admins_str:
        print("‚ö†Ô∏è –í .env –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_ID")
        return
    
    # –ü–∞—Ä—Å–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = [int(id_str.strip()) for id_str in admins_str.split(',') if id_str.strip().isdigit()]
    
    if not admin_ids:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ID –≤ ADMIN_ID")
        return
    
    with Session() as session:
        added_count = 0
        updated_count = 0
        
        for telegram_id in admin_ids:
            try:
                user = session.query(User).filter_by(telegram_id=telegram_id).first()
                
                if user:
                    if not user.is_admin:
                        user.is_admin = True
                        updated_count += 1
                        print(f"üõ† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    user = User(
                        telegram_id=telegram_id,
                        username=f"admin_{telegram_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
                        is_admin=True,
                        is_it_specialist=True  # –ê–¥–º–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ IT-—Å–ø–µ—Ü–∞
                    )
                    session.add(user)
                    added_count += 1
                    print(f"üëë –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {telegram_id}")
                
                session.commit()
                
            except Exception as e:
                session.rollback()
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID {telegram_id}: {e}")
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
