import html
from telebot import  types
from models import (Session, Category)
from config import *
from working_db import * 
from interface_IT_specialist import *



def register_user_handlers(bot):
    
    
    def get_user_keyboard(is_admin=False, is_it_specialist=False):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        if is_admin:
            markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            markup.add("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏", )
            markup.add("üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            markup.add("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
        elif is_it_specialist:
            markup.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É")
            markup.add("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        else:
            markup.add("üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
        return markup
    
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        with Session() as session:
            user = get_or_create_user(session, message)
            markup = get_user_keyboard(user.is_admin, user.is_it_specialist)
            text = (
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if user.is_admin else
                "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞" if user.is_it_specialist else
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            )
            bot.send_message(message.chat.id, f"{text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    
            
    @bot.message_handler(func=lambda msg: msg.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    def create_ticket(message):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        with Session() as session:
            categories = session.query(Category).all()
        try:
            if not categories:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                return
            
            markup = types.InlineKeyboardMarkup()
            for category in categories:
                markup.add(types.InlineKeyboardButton(text=category.name,
                    callback_data=f"category_{category.id}"))
            
            bot.send_message(message.chat.id, "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
                reply_markup=markup)
            
        except Exception as e:
            print(f'–æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_ticket: {e} ')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
    def handle_category_selection(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_id = int(call.data.split('_')[1])
        
        with Session() as session:
            category = session.get(Category, category_id)
            if not category or not category.subcategories:
                bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            markup = types.InlineKeyboardMarkup()
            for subcat in category.subcategories:
                markup.add(types.InlineKeyboardButton(
                    text=subcat.name,
                    callback_data=f"subcat_{subcat.id}"
                ))
            
            bot.edit_message_text(
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('subcat_'))
    def handle_subcategory_selection(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        subcat_id = int(call.data.split('_')[1])
        
        with Session() as session:
            subcat = session.get(Subcategory, subcat_id)
            if not subcat:
                bot.answer_callback_query(call.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º subcat_id –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                f"üîß <b>{subcat.category.name} ‚Üí {subcat.name}</b>\n\n"
                f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n{subcat.recommendation}\n\n"
                "–ü–æ–º–æ–≥–ª–∏ –ª–∏ —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?",
                call.message.chat.id,
                call.message.message_id,
                # parse_mode='HTML'
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ü–æ–º–æ–≥–ª–æ", callback_data=f"help_yes_{subcat.id}"),
                types.InlineKeyboardButton("‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"help_no_{subcat.id}")
            )
            
            bot.send_message(
                call.message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('help_'))
    def handle_help_response(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        action, subcat_id = call.data.split('_')[1], int(call.data.split('_')[2])
        
        if action == 'yes':
            # –ï—Å–ª–∏ –ø–æ–º–æ–≥–ª–æ - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É
            with Session() as session:
                user = session.query(User).filter_by(telegram_id=call.from_user.id).first()
                subcat = session.get(Subcategory, subcat_id)
                
                if user and subcat:
                    ticket = Ticket(
                        user_id=user.id,
                        subcategory_id=subcat.id,
                        status='–ó–∞–∫—Ä—ã—Ç–∞',
                        helped=True
                    )
                    session.add(ticket)
                    session.commit()
                    
                    bot.edit_message_text(
                        "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–º–æ–≥–ª–∏!\n"
                        f"–ó–∞—è–≤–∫–∞ #{ticket.id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∞.\n"
                        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                        call.message.chat.id,
                        call.message.message_id
                    )
                else:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            msg = bot.edit_message_text(
                "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n"
                "(–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç)",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º subcat_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            bot.register_next_step_handler(
                msg, 
                process_problem_description, 
                subcat_id=subcat_id
            )
            
    def process_problem_description(message, subcat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∏ –°–ö–†–ò–ù–®–û–¢–ê (–≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ)"""
        description = message.text if message.content_type == 'text' else message.caption
        if not description:
            description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        screenshot_data = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            screenshot_data = bot.download_file(file_info.file_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        elif message.document:
            if message.document.mime_type and message.document.mime_type.startswith('image/'):
                if message.document.file_size > 10 * 1024 * 1024:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10 –ú–ë)")
                    return
                file_info = bot.get_file(message.document.file_id)
                screenshot_data = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            subcat = session.get(Subcategory, subcat_id)
            
            if user and subcat:
                ticket = Ticket(
                    user_id=user.id,
                    subcategory_id=subcat.id,
                    description=description,
                    status='–í —Ä–∞–±–æ—Ç–µ',          # ‚Üê —Å—Ä–∞–∑—É "–í —Ä–∞–±–æ—Ç–µ"
                    taken_at=datetime.now(),    # ‚Üê —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–∑—è—Ç–∏—è
                    screenshot=screenshot_data, # ‚Üê –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    helped=False
                )
                session.add(ticket)
                session.commit()

                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_keyboard = get_user_keyboard(
                    is_admin=user.is_admin,
                    is_it_specialist=user.is_it_specialist
                )

                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket.id} —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {subcat.category.name} ‚Üí {subcat.name}\n"
                    f"–°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'.",
                    reply_markup=user_keyboard
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
                notify_it_specialists(ticket)
            else:
                # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                user_keyboard = get_user_keyboard()
                bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.",
                    reply_markup=user_keyboard
                )
                
                
    def notify_it_specialists(ticket):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        with Session() as session:
            it_specialists = session.query(User).filter_by(is_it_specialist=True).all()
            if not it_specialists:
                print("–ù–µ—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return

            short_desc = (ticket.description[:50] + '...') if len(ticket.description) > 50 else ticket.description
            message_text = (
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b> #{ticket.id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {html.escape(short_desc)}\n"
                f"–í—Ä–µ–º—è: {ticket.created_at.strftime('%d.%m %H:%M')}"
            )

            for specialist in it_specialists:
                try:
                    bot.send_message(specialist.telegram_id, message_text)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {specialist.telegram_id}: {e}")                
    
                                
    @bot.message_handler(func=lambda msg: msg.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
    def show_user_tickets(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            tickets = session.query(Ticket).filter_by(user_id=user.id)\
                .order_by(Ticket.created_at.desc()).limit(10).all()
            
            if not tickets:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
                return
            
            response = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:\n\n"
            for ticket in tickets:
                # –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                if ticket.status == "–ó–∞–∫—Ä—ã—Ç–∞":
                    status_color = "üü¢"
                elif ticket.status == "–í —Ä–∞–±–æ—Ç–µ":
                    status_color = "üü†"
                elif ticket.status == "–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π":
                    status_color = "üîµ"
                

                response += (
                    f"üîπ #{ticket.id}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_color} {ticket.status}\n"
                    f"–î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                if ticket.closed_at:
                    response += f"–ó–∞–∫—Ä—ã—Ç–∞: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}\n"
                response += "\n"
            
            bot.send_message(message.chat.id, response)