import os
import time
from telebot import TeleBot, types
from models import (Session, engine, Category)
from config import *
from keyboards import *
from working_db import * 
import uuid


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î: 1-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                # 2-–∑–∞–ø–æ–ª–µ–Ω–µ–∏–µ –ë–î
                # 3-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ò–¢ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –ë–î
# with Session() as session:
#     create_tables(engine)
#     add_category(session)
    # setup_it_specialists()
    
    
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    with Session() as session:
        user = get_or_create_user(session, message)
        
    if user:
        bot.send_message(
            message.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ticket –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.\n"
            "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        

@bot.message_handler(commands=['ticket'])
def create_ticket(message):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    with Session() as session:
        categories = session.query(Category).all()
    try:
        if not categories:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return
        
        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(text=category.name,
                callback_data=f"category_{category.id}"))
        
        bot.send_message(message.chat.id, "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
            reply_markup=markup)
        
    except Exception as e:
        print(f'–æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_ticket: {e} ')

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split('_')[1])
    
    with Session() as session:
        category = session.get(Category, category_id)
        if not category or not category.subcategories:
            bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = types.InlineKeyboardMarkup()
        for subcat in category.subcategories:
            markup.add(types.InlineKeyboardButton(
                text=subcat.name,
                callback_data=f"subcat_{subcat.id}"
            ))
        
        bot.edit_message_text(
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('subcat_'))
def handle_subcategory_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcat_id = int(call.data.split('_')[1])
    
    with Session() as session:
        subcat = session.get(Subcategory, subcat_id)
        if not subcat:
            bot.answer_callback_query(call.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º subcat_id –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            f"üîß <b>{subcat.category.name} ‚Üí {subcat.name}</b>\n\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n{subcat.recommendation}\n\n"
            "–ü–æ–º–æ–≥–ª–∏ –ª–∏ —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –ü–æ–º–æ–≥–ª–æ", callback_data=f"help_yes_{subcat.id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"help_no_{subcat.id}")
        )
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('help_'))
def handle_help_response(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    action, subcat_id = call.data.split('_')[1], int(call.data.split('_')[2])
    
    if action == 'yes':
        # –ï—Å–ª–∏ –ø–æ–º–æ–≥–ª–æ - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=call.from_user.id).first()
            subcat = session.get(Subcategory, subcat_id)
            
            if user and subcat:
                ticket = Ticket(
                    user_id=user.id,
                    subcategory_id=subcat.id,
                    status='–ó–∞–∫—Ä—ã—Ç',
                    helped=True
                )
                session.add(ticket)
                session.commit()
                
                bot.edit_message_text(
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–º–æ–≥–ª–∏!\n"
                    f"–ó–∞—è–≤–∫–∞ #{ticket.id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∞.\n"
                    "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                    call.message.chat.id,
                    call.message.message_id
                )
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        msg = bot.edit_message_text(
            "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n"
            "(–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç)",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º subcat_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.register_next_step_handler(
            msg, 
            process_problem_description, 
            subcat_id=subcat_id
        )


def process_problem_description(message, subcat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ñ–∞–π–ª–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
    file_path = None
    file_info_text = ""
    
    if message.content_type == 'photo':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        file_ext = file_info.file_path.split('.')[-1] if '.' in file_info.file_path else 'jpg'
        file_path = f"files/{uuid.uuid4()}.{file_ext}"
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        file_info_text = "\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ"
        
    elif message.document:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if message.document.file_size > 10 * 1024 * 1024:  # 10 –ú–ë
            bot.send_message(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10 –ú–ë)")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        file_info = bot.get_file(message.document.file_id)
        file_ext = message.document.file_name.split('.')[-1]
        file_path = f"files/{uuid.uuid4()}.{file_ext}"
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        file_info_text = f"\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {message.document.file_name}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    problem_description = message.text if message.content_type == 'text' else message.caption
    if not problem_description:
        problem_description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        subcat = session.get(Subcategory, subcat_id)
        
        if user and subcat:
            ticket = Ticket(
                user_id=user.id,
                subcategory_id=subcat.id,
                description=problem_description,
                status='–û—Ç–∫—Ä—ã—Ç',
                file_path=file_path,
                helped=False
            )
            session.add(ticket)
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket.id} —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {subcat.category.name} ‚Üí {subcat.name}\n"
                f"–°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç\n"
                f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {problem_description}{file_info_text}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é /status.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
            notify_it_specialists(
                ticket_id=ticket.id,
                category_name=f"{subcat.category.name} ‚Üí {subcat.name}",
                username=user.username,
                description=problem_description,
                file_info=file_info_text,
                created_at=ticket.created_at.strftime('%d.%m.%Y %H:%M')
            )
            
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.ReplyKeyboardRemove()
            )

def notify_it_specialists(ticket_id, category_name, username, description, file_info, created_at):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    with Session() as session:
        it_specialists = session.query(User).filter_by(is_it_specialist=True).all()
        
        if not it_specialists:
            print("–ù–µ—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        message_text = (
            f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}{file_info}\n"
            f"üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
            f"–î–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É: /take_{ticket_id}"
        )
        
        for specialist in it_specialists:
            try:
                bot.send_message(
                    specialist.telegram_id,
                    message_text,
                    parse_mode='Markdown'
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É {specialist.telegram_id}: {e}")


@bot.message_handler(commands=['status'])
def show_user_tickets(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with Session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        tickets = session.query(Ticket).filter_by(user_id=user.id)\
            .order_by(Ticket.created_at.desc()).limit(10).all()
        
        if not tickets:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        
        response = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
        for ticket in tickets:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            status_color = "üü¢" if ticket.status == "–ó–∞–∫—Ä—ã—Ç" else "üü°"
            if ticket.status == "–í —Ä–∞–±–æ—Ç–µ":
                status_color = "üü†"
            elif ticket.status == "–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π":
                status_color = "üîµ"
            
            response += (
                f"üîπ #{ticket.id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name} ‚Üí {ticket.subcategory.name}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_color} {ticket.status}\n"  # –í–æ—Ç –∑–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω—è–µ–º
                f"–î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            if ticket.closed_at:
                response += f"–ó–∞–∫—Ä—ã—Ç–∞: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}\n"
            response += "\n"
        
        bot.send_message(message.chat.id, response)

        
        
        
        

    

    
    
    
    
if __name__ == '__main__':
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    for i in range(3, 0, -1):
        print(f'{i}...')
        time.sleep(0.5)
    bot.polling()