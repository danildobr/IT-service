import json
import os
from datetime import datetime 
from sqlalchemy import (Boolean, DateTime, Text, create_engine, exists,
                        Column, Integer, String, ForeignKey)
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from config import *

Base = declarative_base()

class User(Base):
    '''–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'''
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    username = Column(String(100), nullable=False)
    is_admin = Column(Boolean, default=False)           # —Ñ–ª–∞–≥–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    is_it_specialist = Column(Boolean, default=False)   # —Ñ–ª–∞–≥–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    
    tickets = relationship("Ticket", back_populates="user", cascade="all, delete")

class Category(Base):
    '''–¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º'''
    __tablename__ = 'categories'
    
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True, nullable=False)
    advice = Column(Text, nullable=False)
    
    tickets = relationship("Ticket", back_populates="category")

class Ticket(Base):
    '''–¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫'''
    __tablename__ = 'tickets'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete="CASCADE"), nullable=False)
    # —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å–æ–∑–¥–∞–≤—à–∏–º –∑–∞—è–≤–∫—É
    category_id = Column(Integer, ForeignKey('categories.id'), nullable=False)
    # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    description = Column(Text)
    # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    status = Column(String(20), default='–û—Ç–∫—Ä—ã—Ç', nullable=False)
    # —Å—Ç–∞—Ç—É—Å—ã: "–û—Ç–∫—Ä—ã—Ç", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—Ä—ã—Ç"
    created_at = Column(DateTime, default=datetime.now, nullable=False)
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 
    taken_at = Column(DateTime)
    # –≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É
    closed_at = Column(DateTime)
    # –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–∫–∏
    file_path = Column(String(255))
    # –ø—É—Ç—å –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, PDF –∏ –¥—Ä.)
    helped = Column(Boolean)
    # –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    user = relationship("User", back_populates="tickets")
    category = relationship("Category", back_populates="tickets")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

def create_tables(engine):
    Base.metadata.drop_all(engine) # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    Base.metadata.create_all(engine) # —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü


def add_category(session, json_file='data_category.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î,
        –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(json_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        return

    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            categories_data = json.load(f)

        added_count = 0
        for item in categories_data:
            name = item["category"].strip()
            advice = item["advice"].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –ë–î
            existing = session.query(Category).filter_by(name=name).first()
            if existing:
                print(f"üî∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            new_category = Category(name=name, advice=advice)
            session.add(new_category)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {name} ‚Üí {advice}")
            added_count += 1

        session.commit()
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        session.rollback()



def check_user(session, message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        return user
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
              

def get_or_create_user(session, message):
    '''–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        user = check_user(session, message)
        
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
            )
            session.add(user)
            session.commit()
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {message.from_user.username}')
            return user
        
        return user
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        
        
        
        
        