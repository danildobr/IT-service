from telebot import types
from models import *
from models import *
from datetime import datetime
from telebot import types

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_COMMANDS = ['users', 'statistics', 'add_it', 'remove_it', 'broadcast', 'delete_ticket']

def register_admin_handlers(bot):
    
    @bot.message_handler(commands=ADMIN_COMMANDS)
    def check_admin(message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user or not user.is_admin:
                bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if message.text.startswith('/users'):
            list_users(message)
        elif message.text.startswith('/statistics'):
            show_stats(message)
        elif message.text.startswith('/add_it'):
            add_it_specialist(message)
        elif message.text.startswith('/remove_it'):
            remove_it_specialist(message)
        elif message.text.startswith('/broadcast'):
            start_broadcast(message)
        elif message.text.startswith('/delete_ticket'):
            handle_delete_ticket(message)
            

    def list_users(message):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with Session() as session:
            users = session.query(User).order_by(User.id.desc()).limit(100).all()
            
            if not users:
                bot.reply_to(message, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            message_parts = []
            current_part = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>:\n\n"
            
            for user in users:
                user_info = (
                    f"ID: {user.id} | @{user.username}\n"
                    f"–¢–µ–ª–µ–≥—Ä–∞–º ID: {user.telegram_id}\n"
                    f"–†–æ–ª–∏: {'–ê–¥–º–∏–Ω' if user.is_admin else ''} "
                    f"{'–ò–¢-—Å–ø–µ—Ü' if user.is_it_specialist else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
                
                if len(current_part) + len(user_info) > 4000:
                    message_parts.append(current_part)
                    current_part = user_info
                else:
                    current_part += user_info

            if current_part:
                message_parts.append(current_part)

            for part in message_parts:
                bot.send_message(message.chat.id, part, parse_mode='HTML')

    def show_stats(message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with Session() as session:
            stats = {
                'users': session.query(User).count(),
                'tickets': session.query(Ticket).count(),
                'open_tickets': session.query(Ticket).filter_by(status='–û—Ç–∫—Ä—ã—Ç').count(),
                'in_work': session.query(Ticket).filter_by(status='–í —Ä–∞–±–æ—Ç–µ').count(),
            }
            
            text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
                f"üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['tickets']}\n"
                f"üü° –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['open_tickets']}\n"
                f"üü† –í —Ä–∞–±–æ—Ç–µ: {stats['in_work']}\n"
                f"üü¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['tickets'] - stats['open_tickets'] - stats['in_work']}"
            )
            bot.send_message(message.chat.id, text, parse_mode='HTML')

    def add_it_specialist(message):
        """–î–æ–±–∞–≤–∏—Ç—å –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        try:
            user_id = message.text.split()[1]
            with Session() as session:
                user = session.query(User).filter(
                    (User.telegram_id == user_id) | 
                    (User.username == user_id.strip('@'))
                ).first()
                
                if user:
                    user.is_it_specialist = True
                    session.commit()
                    bot.reply_to(message, f"‚úÖ @{user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
                else:
                    bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
             bot.reply_to(message,f"‚ùå –û—à–∏–±–∫–∞: {str(e)}, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç /remove_it <—Ç–µ–ª–µ–≥—Ä–∞–º ID –∏–ª–∏ –∏–º—è>")

    def remove_it_specialist(message):
        """–£–¥–∞–ª–∏—Ç—å –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        try:
            user_id = message.text.split()[1]
            with Session() as session:
                user = session.query(User).filter(
                    (User.telegram_id == user_id) | 
                    (User.username == user_id.strip('@'))
                ).first()
                
                if user:
                    user.is_it_specialist = False
                    session.commit()
                    bot.reply_to(message, f"‚úÖ @{user.username} –±–æ–ª—å—à–µ –Ω–µ –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
                else:
                    bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}, —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è /remove_it <—Ç–µ–ª–µ–≥—Ä–∞–º ID –∏–ª–∏ –∏–º—è>")

    def start_broadcast(message):
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        msg = bot.reply_to(message, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, process_broadcast)

    def process_broadcast(message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        with Session() as session:
            users = session.query(User).all()
            success = 0
            for user in users:
                try:
                    bot.send_message(user.telegram_id, f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>:\n\n{message.text}", parse_mode='HTML')
                    success += 1
                except:
                    continue
            
            bot.reply_to(message, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}")
    
    @bot.message_handler(commands=['delete_ticket'])
    def handle_delete_ticket(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            args = message.text.split()
            if len(args) < 2:
                bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delete_ticket <ID –∑–∞—è–≤–∫–∏>")
                return

            ticket_id = int(args[1])
            
            with Session() as session:

                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                
                if not ticket:
                    bot.reply_to(message, f"‚ùå –ó–∞—è–≤–∫–∞ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{ticket_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_del")
                )
                
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{ticket_id}?\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.user.username}\n"
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=markup
                )

        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_del_'))
    def confirm_delete(call):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        ticket_id = int(call.data.split('_')[-1])
        
        with Session() as session:
            try:
                ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                if ticket:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if ticket.file_path and os.path.exists(ticket.file_path):
                        os.remove(ticket.file_path)
                    
                    session.delete(ticket)
                    session.commit()
                    
                    bot.edit_message_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞",
                        call.message.chat.id,
                        call.message.message_id
                    )
                else:
                    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")

            except Exception as e:
                session.rollback()
                bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}",
                    call.message.chat.id,
                    call.message.message_id
                )

    @bot.callback_query_handler(func=lambda call: call.data == 'cancel_del')
    def cancel_delete(call):
        """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        bot.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            call.message.chat.id,
            call.message.message_id
        )