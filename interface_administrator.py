from telebot import types
from models import *
from models import *
from datetime import datetime
from telebot import types
from decorators import admin_required
import tempfile
from openpyxl.styles import Font
from openpyxl import Workbook
from openpyxl import load_workbook
import tempfile
import os
from models import Category, Subcategory
from working_db import Session
from sqlalchemy import func
from datetime import datetime


def register_admin_handlers(bot):
    
    @bot.message_handler(func=lambda msg: msg.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    @admin_required
    def list_users(message):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with Session() as session:
            users = session.query(User).order_by(User.id.desc()).all()
            
            if not users:
                bot.reply_to(message, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            filepath = tmp.name

        # –°–æ–∑–¥–∞—ë–º Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["ID", "Username", "Telegram ID", "–†–æ–ª–∏"]
        ws.append(headers)
        for cell in ws[1]:
            cell.font = Font(bold=True)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for user in users:
            roles = []
            if user.is_admin:
                roles.append("–ê–¥–º–∏–Ω")
            if user.is_it_specialist:
                roles.append("–ò–¢-—Å–ø–µ—Ü")
            if not roles:
                roles.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            ws.append([
                user.id,
                f"@{user.username}" if user.username else "",
                user.telegram_id,
                ", ".join(roles)
            ])

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        for col in "ABCD":
            ws.column_dimensions[col].width = 20

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(filepath)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        with open(filepath, 'rb') as excel_file:
            bot.send_document(
                chat_id=message.chat.id,
                document=excel_file,
                caption="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Excel)",
                visible_file_name="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.xlsx"
            )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(filepath)


    # def start_broadcast(message):
    #     """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    #     msg = bot.reply_to(message, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    #     bot.register_next_step_handler(msg, process_broadcast)

    # def process_broadcast(message):
    #     """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    #     with Session() as session:
    #         users = session.query(User).all()
    #         success = 0
    #         for user in users:
    #             try:
    #                 bot.send_message(user.telegram_id, f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>:\n\n{message.text}", parse_mode='HTML')
    #                 success += 1
    #             except:
    #                 continue
            
    #         bot.reply_to(message, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}")
    
    # @bot.message_handler(commands=['delete_ticket'])
    # def handle_delete_ticket(message):
    #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    #     try:
    #         args = message.text.split()
    #         if len(args) < 2:
    #             bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delete_ticket <ID –∑–∞—è–≤–∫–∏>")
    #             return

    #         ticket_id = int(args[1])
            
    #         with Session() as session:

    #             ticket = session.query(Ticket).filter_by(id=ticket_id).first()
                
    #             if not ticket:
    #                 bot.reply_to(message, f"‚ùå –ó–∞—è–≤–∫–∞ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    #                 return

    #             # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    #             markup = types.InlineKeyboardMarkup()
    #             markup.add(
    #                 types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{ticket_id}"),
    #                 types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_del")
    #             )
                
    #             bot.send_message(
    #                 message.chat.id,
    #                 f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{ticket_id}?\n"
    #                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket.subcategory.category.name}\n"
    #                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket.user.username}\n"
    #                 f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
    #                 reply_markup=markup
    #             )

    #     except ValueError:
    #         bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏")
    #     except Exception as e:
    #         bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    # @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_del_'))
    # def confirm_delete(call):
    #     """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    #     ticket_id = int(call.data.split('_')[-1])
        
    #     with Session() as session:
    #         try:
    #             ticket = session.query(Ticket).filter_by(id=ticket_id).first()
    #             if ticket:
    #                 # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    #                 if ticket.file_path and os.path.exists(ticket.file_path):
    #                     os.remove(ticket.file_path)
                    
    #                 session.delete(ticket)
    #                 session.commit()
                    
    #                 bot.edit_message_text(
    #                     f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞",
    #                     call.message.chat.id,
    #                     call.message.message_id
    #                 )
    #             else:
    #                 bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")

    #         except Exception as e:
    #             session.rollback()
    #             bot.edit_message_text(
    #                 f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}",
    #                 call.message.chat.id,
    #                 call.message.message_id
                # )
    @bot.message_handler(func=lambda msg: msg.text == "üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    @admin_required
    def handle_upload_categories(message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        msg = bot.reply_to(
            message,
            "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.")
        bot.register_next_step_handler(msg, _process_uploaded_excel)
        
    def _process_uploaded_excel(message):
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Excel-—Ñ–∞–π–ª–∞ '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.xlsx'"""
        if message.content_type != 'document':
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx)")
            return

        filename = message.document.file_name
        if filename != "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.xlsx":
            bot.reply_to(
                message,
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞!\n"
                "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ—á–Ω–æ: <b>–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.xlsx</b>",
                parse_mode='HTML'
            )
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
                tmp.write(downloaded_file)
                tmp_path = tmp.name

            wb = load_workbook(tmp_path)
            os.unlink(tmp_path)

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            excel_data = {}
            for sheet_name in wb.sheetnames:
                category_name = sheet_name.strip()
                if not category_name:
                    continue
                excel_data[category_name] = []
                ws = wb[sheet_name]
                for row in ws.iter_rows(min_row=2, max_col=2, values_only=True):
                    subcat_name = row[0]
                    recommendation = row[1] if row[1] is not None else ""
                    if subcat_name:
                        excel_data[category_name].append({
                            'name': str(subcat_name).strip(),
                            'recommendation': str(recommendation).strip()
                        })

            # –†–∞–±–æ—Ç–∞–µ–º —Å –ë–î
            with Session() as session:
                # === –®–ê–ì 1: –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
                db_categories = {cat.name: cat for cat in session.query(Category).all()}
                added_categories = 0
                added_subcategories = 0
                updated_recommendations = 0

                for cat_name, subcats in excel_data.items():
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    category = db_categories.get(cat_name)
                    if not category:
                        category = Category(name=cat_name)
                        session.add(category)
                        session.flush()
                        added_categories += 1
                    db_categories[cat_name] = category  # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ flush

                    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    db_subcats = {
                        sub.name: sub
                        for sub in session.query(Subcategory).filter_by(category_id=category.id).all()
                    }

                    for sub_data in subcats:
                        sub_name = sub_data['name']
                        rec = sub_data['recommendation']

                        sub = db_subcats.get(sub_name)
                        if not sub:
                            sub = Subcategory(
                                category_id=category.id,
                                name=sub_name,
                                recommendation=rec
                            )
                            session.add(sub)
                            added_subcategories += 1
                        else:
                            if sub.recommendation != rec:
                                sub.recommendation = rec
                                updated_recommendations += 1

                session.flush()  # –ß—Ç–æ–±—ã –≤—Å–µ ID –±—ã–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã

                # === –®–ê–ì 2: –£–¥–∞–ª—è–µ–º –õ–ò–®–ù–ò–ï –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫) ===
                deleted_subcategories = 0
                for cat_name, category in db_categories.items():
                    if cat_name not in excel_data:
                        continue  # –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∂–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                    db_subcats_in_cat = {
                        sub.name: sub
                        for sub in session.query(Subcategory).filter_by(category_id=category.id).all()
                    }
                    excel_sub_names = {sub['name'] for sub in excel_data[cat_name]}

                    for sub_name, sub in db_subcats_in_cat.items():
                        if sub_name not in excel_sub_names:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∏
                            ticket_exists = session.query(Ticket).filter_by(subcategory_id=sub.id).first()
                            if ticket_exists:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{sub_name}' ‚Äî –µ—Å—Ç—å –∑–∞—è–≤–∫–∏")
                            else:
                                session.delete(sub)
                                deleted_subcategories += 1

                # === –®–ê–ì 3: –£–¥–∞–ª—è–µ–º –õ–ò–®–ù–ò–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π) ===
                deleted_categories = 0
                all_db_categories = session.query(Category).all()
                excel_cat_names = set(excel_data.keys())

                for category in all_db_categories:
                    if category.name not in excel_cat_names:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        subcat_count = session.query(Subcategory).filter_by(category_id=category.id).count()
                        if subcat_count == 0:
                            session.delete(category)
                            deleted_categories += 1
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}' ‚Äî –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                session.commit()

            bot.reply_to(
                message,
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_categories}\n"
                f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_subcategories}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {updated_recommendations}\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {deleted_subcategories}\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {deleted_categories}\n\n"
                f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–µ —É–¥–∞–ª—è–ª–∏—Å—å.",
                parse_mode='HTML'
            )

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
            bot.reply_to(message, error_msg)
            print("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", e)
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)                

    @bot.message_handler(func=lambda msg: msg.text == "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    @admin_required
    def download_categories_excel(message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        try:
            with Session() as session:
                categories = session.query(Category).order_by(Category.name).all()

                if not categories:
                    bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                    return

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
                wb = Workbook()
                # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
                if "Sheet" in wb.sheetnames:
                    wb.remove(wb["Sheet"])

                for category in categories:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–æ 31 —Å–∏–º–≤–æ–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel)
                    sheet_title = category.name[:31]
                    ws = wb.create_sheet(title=sheet_title)

                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    ws["A1"] = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                    ws["B1"] = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
                    for cell in ws[1]:
                        cell.font = Font(bold=True)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    row = 2
                    for subcat in sorted(category.subcategories, key=lambda x: x.name):
                        ws[f"A{row}"] = subcat.name
                        ws[f"B{row}"] = subcat.recommendation
                        row += 1

                    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
                    for col_letter in ["A", "B"]:
                        max_length = 0
                        for cell in ws[col_letter]:
                            if cell.value:
                                max_length = max(max_length, len(str(cell.value)))
                        adjusted_width = min(max_length + 2, 100)
                        ws.column_dimensions[col_letter].width = adjusted_width

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
                    wb.save(tmp.name)
                    tmp_path = tmp.name

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(tmp_path, 'rb') as excel_file:
                bot.send_document(
                    chat_id=message.chat.id,
                    document=excel_file,
                    caption="üìÅ –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    visible_file_name="–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.xlsx"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_path)

        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel:", e)
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)                


    @bot.message_handler(func=lambda msg: msg.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏")
    @admin_required
    def manage_it_specialists_menu(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é: –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å IT-—Å–ø–µ—Ü–∞"""
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="it_add"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="it_remove")
        )
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )


    # === –î–û–ë–ê–í–õ–ï–ù–ò–ï ===

    @bot.callback_query_handler(func=lambda call: call.data == "it_add")
    @admin_required
    def ask_add_it_specialist(call):
        bot.answer_callback_query(call.id)
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ <b>Telegram ID</b> –∏–ª–∏ <b>username</b> (–±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞:",
            parse_mode='HTML'
        )
        bot.register_next_step_handler(msg, process_add_it_input)


    def process_add_it_input(message):
        text = message.text.strip()
        if not text:
            bot.reply_to(message, "‚ùå –í–≤–æ–¥ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞.")
            return

        try:
            with Session() as session:
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = None
                if text.isdigit():
                    user = session.query(User).filter_by(telegram_id=int(text)).first()
                else:
                    user = session.query(User).filter_by(username=text).first()

                if not user:
                    bot.reply_to(
                        message,
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑."
                    )
                    return

                if user.is_it_specialist:
                    name = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
                    bot.reply_to(message, f"‚ÑπÔ∏è {name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
                    return

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                display = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_add_{user.telegram_id}"),
                    types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_it")
                )
                bot.send_message(
                    message.chat.id,
                    f"–ù–∞–∑–Ω–∞—á–∏—Ç—å {display} IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º?",
                    reply_markup=markup
                )

        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_add_"))
    @admin_required
    def confirm_add_it(call):
        telegram_id = int(call.data.split("_")[-1])
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=telegram_id).first()
            if not user or user.is_it_specialist:
                bot.edit_message_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å.", call.message.chat.id, call.message.message_id)
                return

            user.is_it_specialist = True
            session.commit()

            name = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
            bot.edit_message_text(
                f"‚úÖ {name} —Ç–µ–ø–µ—Ä—å IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!",
                call.message.chat.id,
                call.message.message_id
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                bot.send_message(user.telegram_id, "üë®‚Äçüíª –í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞! –û–∑–Ω–∞–∫–æ–º—Ç–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π (—Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å —Å—Å—ã–ª–∫—É)")
            except Exception as e:
                print('–û–±—â–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ {e}')


    # === –£–î–ê–õ–ï–ù–ò–ï ===
    @bot.callback_query_handler(func=lambda call: call.data == "it_remove")
    @admin_required
    def ask_remove_it_specialist(call):
        bot.answer_callback_query(call.id)
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ <b>Telegram ID</b> –∏–ª–∏ <b>username</b> (–±–µ–∑ @) IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode='HTML'
        )
        bot.register_next_step_handler(msg, process_remove_it_input)


    def process_remove_it_input(message):
        text = message.text.strip()
        if not text:
            bot.reply_to(message, "‚ùå –í–≤–æ–¥ –ø—É—Å—Ç.")
            return

        try:
            with Session() as session:
                user = None
                if text.isdigit():
                    user = session.query(User).filter_by(telegram_id=int(text)).first()
                else:
                    user = session.query(User).filter_by(username=text).first()

                if not user:
                    bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                if not user.is_it_specialist:
                    name = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
                    bot.reply_to(message, f"‚ùå {name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
                    return

                display = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_remove_{user.telegram_id}"),
                    types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_it")
                )
                bot.send_message(
                    message.chat.id,
                    f"–õ–∏—à–∏—Ç—å {display} –ø—Ä–∞–≤ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?",
                    reply_markup=markup
                )

        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_remove_"))
    @admin_required
    def confirm_remove_it(call):
        telegram_id = int(call.data.split("_")[-1])
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=telegram_id).first()
            if not user or not user.is_it_specialist:
                bot.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.", call.message.chat.id, call.message.message_id)
                return

            user.is_it_specialist = False
            session.commit()

            name = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
            bot.edit_message_text(
                f"‚úÖ {name} –±–æ–ª—å—à–µ –Ω–µ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                call.message.chat.id,
                call.message.message_id
            )

            try:
                bot.send_message(user.telegram_id, "üë®‚Äçüíª –£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–Ω–∞ —Ä–æ–ª—å IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.")
            except:
                pass


    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_it")
    def cancel_it_action(call):
        bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            
    @bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    @admin_required
    def show_stats_excel(message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
        try:
            with Session() as session:
                # === –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
                total_tickets = session.query(Ticket).count()
                if total_tickets == 0:
                    bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                    return

                # –°—Ç–∞—Ç—É—Å—ã
                status_counts = dict(session.query(Ticket.status, func.count(Ticket.id)).group_by(Ticket.status).all())

                # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                cat_data = session.query(
                    Category.name,
                    func.count(Ticket.id)
                ).join(Subcategory).join(Ticket).group_by(Category.id).all()

                # –ü–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¢–û–ü-20)
                subcat_data = session.query(
                    Subcategory.name,
                    func.count(Ticket.id)
                ).join(Ticket).group_by(Subcategory.id).order_by(func.count(Ticket.id).desc()).limit(20).all()

                # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                monthly_data = session.query(
                    func.strftime('%Y-%m', Ticket.created_at).label('month'),
                    func.count(Ticket.id)
                ).group_by('month').order_by('month').all()

                # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏
                first_ticket = session.query(func.min(Ticket.created_at)).scalar()

            # === –°–æ–∑–¥–∞—ë–º Excel ===
            wb = Workbook()
            ws_summary = wb.active
            ws_summary.title = "–°–≤–æ–¥–∫–∞"

            # --- –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ ---
            ws_summary["A1"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT-–∑–∞—è–≤–æ–∫"
            ws_summary["A1"].font = Font(size=16, bold=True)
            ws_summary["A3"] = "–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:"
            ws_summary["B3"] = total_tickets
            ws_summary["A4"] = "–í —Ä–∞–±–æ—Ç–µ:"
            ws_summary["B4"] = status_counts.get("–í —Ä–∞–±–æ—Ç–µ", 0)
            ws_summary["A5"] = "–û—Ç–∫—Ä—ã—Ç–æ:"
            ws_summary["B5"] = status_counts.get("–û—Ç–∫—Ä—ã—Ç", 0)
            ws_summary["A6"] = "–ó–∞–∫—Ä—ã—Ç–æ:"
            ws_summary["B6"] = status_counts.get("–ó–∞–∫—Ä—ã—Ç", 0)
            ws_summary["A7"] = "–ü–µ—Ä–∏–æ–¥:"
            ws_summary["B7"] = f"{first_ticket.strftime('%d.%m.%Y')} ‚Äî {datetime.now().strftime('%d.%m.%Y')}"

            for row in ws_summary['A3:B7']:
                row[0].font = Font(bold=True)

            # --- –õ–∏—Å—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
            ws_cats = wb.create_sheet("–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            ws_cats["A1"] = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            ws_cats["B1"] = "–ó–∞—è–≤–æ–∫"
            for cell in ws_cats[1]:
                cell.font = Font(bold=True)

            for i, (name, count) in enumerate(cat_data, start=2):
                ws_cats[f"A{i}"] = name
                ws_cats[f"B{i}"] = count

            # –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from openpyxl.chart import PieChart, Reference
            if len(cat_data) > 0:
                pie = PieChart()
                labels = Reference(ws_cats, min_col=1, min_row=2, max_row=len(cat_data)+1)
                data = Reference(ws_cats, min_col=2, min_row=1, max_row=len(cat_data)+1)
                pie.add_data(data, titles_from_data=True)
                pie.set_categories(labels)
                pie.title = "–ó–∞—è–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                ws_cats.add_chart(pie, "D2")

            # --- –õ–∏—Å—Ç: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
            ws_subcats = wb.create_sheet("–ü–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            ws_subcats["A1"] = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            ws_subcats["B1"] = "–ó–∞—è–≤–æ–∫"
            for cell in ws_subcats[1]:
                cell.font = Font(bold=True)

            for i, (name, count) in enumerate(subcat_data, start=2):
                ws_subcats[f"A{i}"] = name
                ws_subcats[f"B{i}"] = count

            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (–¢–û–ü-10)
            if len(subcat_data) > 0:
                from openpyxl.chart import BarChart
                bar = BarChart()
                bar.type = "col"
                bar.style = 10
                bar.title = "–¢–û–ü-10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                bar.y_axis.title = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                bar.x_axis.title = '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'

                data = Reference(ws_subcats, min_col=2, min_row=1, max_row=min(11, len(subcat_data)+1))
                cats = Reference(ws_subcats, min_col=1, min_row=2, max_row=min(11, len(subcat_data)+1))
                bar.add_data(data, titles_from_data=True)
                bar.set_categories(cats)
                ws_subcats.add_chart(bar, "D2")

            # --- –õ–∏—Å—Ç: –°—Ç–∞—Ç—É—Å—ã ---
            ws_status = wb.create_sheet("–°—Ç–∞—Ç—É—Å—ã")
            ws_status["A1"] = "–°—Ç–∞—Ç—É—Å"
            ws_status["B1"] = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            for cell in ws_status[1]:
                cell.font = Font(bold=True)

            statuses = ["–û—Ç–∫—Ä—ã—Ç", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—Ä—ã—Ç", "–û–∂–∏–¥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π"]
            for i, status in enumerate(statuses, start=2):
                ws_status[f"A{i}"] = status
                ws_status[f"B{i}"] = status_counts.get(status, 0)

            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            pie2 = PieChart()
            labels2 = Reference(ws_status, min_col=1, min_row=2, max_row=5)
            data2 = Reference(ws_status, min_col=2, min_row=1, max_row=5)
            pie2.add_data(data2, titles_from_data=True)
            pie2.set_categories(labels2)
            pie2.title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"
            ws_status.add_chart(pie2, "D2")

            # --- –õ–∏—Å—Ç: –î–∏–Ω–∞–º–∏–∫–∞ ---
            ws_trend = wb.create_sheet("–î–∏–Ω–∞–º–∏–∫–∞")
            ws_trend["A1"] = "–ú–µ—Å—è—Ü"
            ws_trend["B1"] = "–ó–∞—è–≤–æ–∫"
            for cell in ws_trend[1]:
                cell.font = Font(bold=True)

            for i, (month, count) in enumerate(monthly_data, start=2):
                ws_trend[f"A{i}"] = month
                ws_trend[f"B{i}"] = count

            # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            if len(monthly_data) > 1:
                from openpyxl.chart import LineChart
                line = LineChart()
                line.title = "–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º"
                line.style = 13
                line.y_axis.title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                line.x_axis.title = "–ú–µ—Å—è—Ü"

                data = Reference(ws_trend, min_col=2, min_row=1, max_row=len(monthly_data)+1)
                cats = Reference(ws_trend, min_col=1, min_row=2, max_row=len(monthly_data)+1)
                line.add_data(data, titles_from_data=True)
                line.set_categories(cats)
                ws_trend.add_chart(line, "D2")

            # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ===
            with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
                wb.save(tmp.name)
                tmp_path = tmp.name

            with open(tmp_path, 'rb') as f:
                bot.send_document(
                    message.chat.id,
                    f,
                    caption="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ (Excel —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏)",
                    visible_file_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞—è–≤–æ–∫.xlsx"
                )
            os.unlink(tmp_path)

        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
            print("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e)
            if 'tmp_path' in locals():
                try:
                    os.unlink(tmp_path)
                except:
                    pass